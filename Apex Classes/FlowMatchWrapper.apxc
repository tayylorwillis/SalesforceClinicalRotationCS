global class FlowMatchWrapper {
     /**
     * this class contains a lot of unused variables, but is
     * helpful for the future if needed
     */
    @AuraEnabled
    @InvocableVariable(label='Preceptor ID' description='ID of the preceptor' required=true)
    global String preceptorId;
    
    @AuraEnabled
    @InvocableVariable(label='Preceptor Name' description='Name of the preceptor' required=true)
    global String preceptorName;
    
    @AuraEnabled
    @InvocableVariable(label='Specialty' description='Preceptor specialty' required=false)
    global String specialty;
    
    @AuraEnabled
    @InvocableVariable(label='Match Score' description='Match percentage score' required=true)
    global Decimal matchScore;
    
    @AuraEnabled
    @InvocableVariable(label='Match Percentage' description='Formatted match percentage score' required=true)
    global String scoreText;
    
    @AuraEnabled
    @InvocableVariable(label='Account ID' description='ID of the account' required=false)
    global String accountId;
    
    @AuraEnabled
    @InvocableVariable(label='Organization Name' description='Name of the preceptor organization' required=false)
    global String organizationName;
    
    @AuraEnabled
    @InvocableVariable(label='Primary Match Factors' description='Key factors that contributed to the match' required=false)
    global String matchFactors;
    
    @AuraEnabled
    @InvocableVariable(label='Site Type' description='Type of preceptor site' required=false)
    global String siteType;
    
    @AuraEnabled
    @InvocableVariable(label='Preceptor Availability' description='Preceptor availability' required=false)
    global String availability;
    
    /**
     * default constructor for Flow
     */
    global FlowMatchWrapper() {
        // empty constructor required for Flow
        this.specialty = '';
        this.organizationName = '';
        this.matchFactors = '';
        this.siteType = '';
        this.availability = '';
    }
    
    /**
     * constructor to create from preceptor data
     */
    global FlowMatchWrapper(String preceptorId, String preceptorName, Decimal matchScore, String accountId) {
        this.preceptorId = preceptorId;
        this.preceptorName = preceptorName;
        this.matchScore = matchScore;
        this.scoreText = matchScore != null ? matchScore.setScale(1) + '%' : '0%';
        this.accountId = accountId;
        this.specialty = '';  // initialize specialty field
        this.organizationName = '';
        this.matchFactors = '';
        this.siteType = '';
        this.availability = '';
    }
    
    /**
     * sets the match factors
     */
    global void setMatchFactors(List<String> factors) {
        if(factors == null || factors.isEmpty()) {
            this.matchFactors = '';
            return;
        }
        
        List<String> topFactors = new List<String>();
        for(Integer i = 0; i < Math.min(factors.size(), 3); i++) {
            topFactors.add(factors[i]);
        }
        
        this.matchFactors = String.join(topFactors, ', ');
    }
}
